import crypto from 'crypto';

export function createKeys() {
    const { publicKey, privateKey } = crypto.generateKeyPairSync("rsa", {
        // The standard secure default length for RSA keys is 2048 bits
        modulusLength: 2048,
    });
    return {
        publicKey: publicKey.export({type: 'pkcs1',format: 'pem'}),
        privateKey: privateKey.export({type: 'pkcs1',format: 'pem'})
    };
}

export function encrypt(destinationKey, text) {
    const encryptedData = crypto.publicEncrypt(
        {
            key: destinationKey,
            padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
            oaepHash: "sha256",
        },
        Buffer.from(text)
    );
    return encryptedData.toJSON();
}

export function decrypt(privateKey, text) {
    const decryptedData = crypto.privateDecrypt(
        {
            key: privateKey,
            // In order to decrypt the data, we need to specify the
            // same hashing function and padding scheme that we used to
            // encrypt the data in the previous step
            padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
            oaepHash: "sha256",
        },
        Buffer.from(text)
    );
    return decryptedData.toString();
}
